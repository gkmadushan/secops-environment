version: "3.1"

services:
  db:
    image: postgres:13.5
    restart: always
    # ports:
    #   - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pswdrd123
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./logs:/usr/src/logs

  queue:
    image: rabbitmq:3-management
    restart: always
    ports:
    #   - 5672:5672
      - 8872:15672
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
      - ./logs:/usr/src/logs

  prometheus:
    image: prom/prometheus:v2.32.0-rc.1
    ports:
      - 9090:9090
    volumes:
      - ./prometheus:/etc/prometheus/

  grafana:
    image: grafana/grafana:8.3.2
    ports:
      - 9091:3000


  adminer:
    image: adminer
    restart: always
    ports:
      - 9080:8080
 

  notification-service:
    build: ./notification-service/
    volumes:
      - ./notification-service/app:/usr/src/app
      - ./logs:/usr/src/logs
    depends_on:
      - queue

  user-management-service:
    build: ./user-management-service/
    ports:
      - "8001:8000"
    volumes:
      - ./user-management-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  software-env-registry-service:
    build: ./software-env-registry-service/
    ports:
      - "8002:8000"
    volumes:
      - ./software-env-registry-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  software-inventory-service:
    build: ./software-inventory-service/
    ports:
      - "8003:8000"
    volumes:
      - ./software-inventory-service/app:/usr/src/app
      - ./logs:/usr/src/logs
    environment:
      - LOG_LEVEL="info"

  issue-management-service:
    build: ./issue-management-service/
    ports:
      - "8004:8000"
    volumes:
      - ./issue-management-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  scheduler-service:
    build: ./scheduler-service/
    ports:
      - "8007:8000"
    volumes:
      - ./scheduler-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  detector-integration-service:
    build: ./detector-integration-service/
    ports:
      - "8005:8000"
    volumes:
      - ./detector-integration-service/app:/usr/src/app
      - ./detector-integration-service/arf:/usr/src/arf
      - ./logs:/usr/src/logs

  credentail-management-service:
    build: ./credential-management-service/
    ports:
      - "8006:8000"
    volumes:
      - ./credential-management-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  knowledge-base:
    build: ./knowledge-base/
    ports:
      - "8008:8000"
    volumes:
      - ./knowledge-base/app:/usr/src/app
      - ./logs:/usr/src/logs

  data-collector-service:
    build: ./data-collector-service/
    volumes:
      - ./data-collector-service/app:/usr/src/app
      - ./logs:/usr/src/logs
    depends_on:
      - queue
      - db

  reporting-service:
    build: ./reporting-service/
    ports:
      - "8009:8000"
    volumes:
      - ./reporting-service/app:/usr/src/app
      - ./logs:/usr/src/logs

  vulnerablity-management-experience-service:
    build: ./vulnerablity-management-experience-service/
    ports:
      - "8088:8000"
    volumes:
      - ./vulnerablity-management-experience-service/app:/usr/src/app
      - ./logs:/usr/src/logs
    depends_on:
      - queue
      - db

  code-quality-analyzer:
    image: sonarqube:latest
    ports:
      - "8180:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true   
    volumes:
      - ./sonar/data:/opt/sonarqube/data
      - ./sonar/logs:/opt/sonarqube/logs
      - ./sonar/extensions:/opt/sonarqube/extensions
    networks:
      - secops

  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:4.4
    environment:
      - SONAR_LOGIN="admin"
      - SONAR_PASSWORD="Madu1987"
      - SONAR_HOST_URL="http://code-quality-analyzer:9000"
      - SONAR_LOGIN="57e922d78c786c4b1701165aa984c7640b694cf1"
    volumes:
      - ./:/codebase
    networks:
      - secops

networks:
  secops:
    name: secops-network
    driver: host

